/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module logic_1 (
    input clk,
    input rst,
    input up,
    input down,
    input left,
    input right,
    input confirm,
    input myreset,
    output reg [34:0] outred,
    output reg [34:0] outgreen,
    output reg [13:0] outscores,
    output reg [7:0] outtime
  );
  
  
  
  reg [27:0] M_gclk_d, M_gclk_q = 1'h0;
  
  reg [34:0] M_path_d, M_path_q = 1'h0;
  
  reg [34:0] M_leftMines_d, M_leftMines_q = 1'h0;
  
  wire [8-1:0] M_timer_out;
  reg [1-1:0] M_timer_settozero;
  pointonecounter_17 timer (
    .clk(clk),
    .rst(rst),
    .settozero(M_timer_settozero),
    .out(M_timer_out)
  );
  
  reg [5:0] M_map_number_d, M_map_number_q = 1'h0;
  
  reg [3:0] M_round_d, M_round_q = 1'h0;
  
  reg [5:0] M_usedmap_d, M_usedmap_q = 1'h0;
  
  reg [13:0] M_scores_d, M_scores_q = 1'h0;
  
  reg [2:0] M_counter_failscreen_d, M_counter_failscreen_q = 1'h0;
  
  
  localparam START_state = 3'd0;
  localparam SHOWROUND_state = 3'd1;
  localparam SHOWMINE_state = 3'd2;
  localparam RUNNING_state = 3'd3;
  localparam FAIL_state = 3'd4;
  localparam ROUNDSUC_state = 3'd5;
  localparam FINALSUCCESS_state = 3'd6;
  
  reg [2:0] M_state_d, M_state_q = START_state;
  
  reg [2:0] start_row;
  
  reg [2:0] start_col;
  
  reg [2:0] end_row;
  
  reg [2:0] end_col;
  
  reg [2:0] bound_left;
  
  reg [2:0] bound_right;
  
  reg [2:0] bound_up;
  
  reg [2:0] bound_down;
  
  reg [2:0] M_now_position_row_d, M_now_position_row_q = 1'h0;
  
  reg [2:0] M_now_position_col_d, M_now_position_col_q = 1'h0;
  
  wire [1-1:0] M_selectHelper_out;
  reg [1-1:0] M_selectHelper_inp;
  select_18 selectHelper (
    .clk(clk),
    .rst(rst),
    .inp(M_selectHelper_inp),
    .out(M_selectHelper_out)
  );
  
  wire [1-1:0] M_fasterselectHelper_out;
  reg [1-1:0] M_fasterselectHelper_inp;
  select_19 fasterselectHelper (
    .clk(clk),
    .rst(rst),
    .inp(M_fasterselectHelper_inp),
    .out(M_fasterselectHelper_out)
  );
  
  wire [35-1:0] M_map_map_mine;
  wire [35-1:0] M_map_map_bonus;
  wire [3-1:0] M_map_start_row;
  wire [3-1:0] M_map_start_col;
  wire [3-1:0] M_map_end_row;
  wire [3-1:0] M_map_end_col;
  wire [3-1:0] M_map_bound_left;
  wire [3-1:0] M_map_bound_right;
  wire [3-1:0] M_map_bound_up;
  wire [3-1:0] M_map_bount_down;
  wire [35-1:0] M_map_boundary;
  reg [6-1:0] M_map_number;
  map_20 map (
    .number(M_map_number),
    .map_mine(M_map_map_mine),
    .map_bonus(M_map_map_bonus),
    .start_row(M_map_start_row),
    .start_col(M_map_start_col),
    .end_row(M_map_end_row),
    .end_col(M_map_end_col),
    .bound_left(M_map_bound_left),
    .bound_right(M_map_bound_right),
    .bound_up(M_map_bound_up),
    .bount_down(M_map_bount_down),
    .boundary(M_map_boundary)
  );
  
  wire [35-1:0] M_numbers_out;
  reg [3-1:0] M_numbers_round;
  numbers_21 numbers (
    .round(M_numbers_round),
    .out(M_numbers_out)
  );
  
  wire [8-1:0] M_aluCompute_out;
  wire [1-1:0] M_aluCompute_z;
  wire [1-1:0] M_aluCompute_v;
  wire [1-1:0] M_aluCompute_n;
  reg [6-1:0] M_aluCompute_mode;
  reg [8-1:0] M_aluCompute_a;
  reg [8-1:0] M_aluCompute_b;
  aluCompute_22 aluCompute (
    .mode(M_aluCompute_mode),
    .a(M_aluCompute_a),
    .b(M_aluCompute_b),
    .out(M_aluCompute_out),
    .z(M_aluCompute_z),
    .v(M_aluCompute_v),
    .n(M_aluCompute_n)
  );
  
  wire [35-1:0] M_animation_out_mine;
  wire [35-1:0] M_animation_out_win;
  animation_23 animation (
    .clk(clk),
    .rst(rst),
    .out_mine(M_animation_out_mine),
    .out_win(M_animation_out_win)
  );
  
  localparam HALFGAME = 2'h3;
  
  integer i;
  
  integer j;
  
  always @* begin
    M_state_d = M_state_q;
    M_usedmap_d = M_usedmap_q;
    M_scores_d = M_scores_q;
    M_now_position_col_d = M_now_position_col_q;
    M_now_position_row_d = M_now_position_row_q;
    M_leftMines_d = M_leftMines_q;
    M_path_d = M_path_q;
    M_map_number_d = M_map_number_q;
    M_gclk_d = M_gclk_q;
    M_counter_failscreen_d = M_counter_failscreen_q;
    M_round_d = M_round_q;
    
    M_gclk_d = M_gclk_q + 1'h1;
    outred = 35'h000000000;
    outgreen = 35'h000000000;
    M_selectHelper_inp = 1'h0;
    M_fasterselectHelper_inp = 1'h0;
    outscores = M_scores_q;
    outtime = 1'h0;
    M_map_number = M_map_number_q;
    start_row = M_map_start_row;
    start_col = M_map_start_col;
    end_row = M_map_end_row;
    end_col = M_map_end_col;
    bound_left = M_map_bound_left;
    bound_right = M_map_bound_right;
    bound_up = M_map_bound_up;
    bound_down = M_map_bount_down;
    M_numbers_round = 1'h0;
    M_timer_settozero = 1'h0;
    M_aluCompute_mode = 6'h00;
    M_aluCompute_a = 8'h00;
    M_aluCompute_b = 8'h00;
    if (M_state_q == START_state) begin
      outred = M_animation_out_mine;
      M_scores_d = 1'h0;
      M_usedmap_d = 1'h0;
      if (confirm && M_gclk_q > 24'h989680) begin
        M_timer_settozero = 1'h1;
        M_state_d = SHOWROUND_state;
        M_round_d = 1'h0;
      end
    end else begin
      if (M_state_q == SHOWROUND_state) begin
        M_numbers_round = M_round_q + 1'h1;
        outred = M_numbers_out;
        if (M_timer_out == 5'h14) begin
          M_state_d = SHOWMINE_state;
          if (M_round_q >= 2'h3) begin
            M_map_number_d = 6'h20 + M_gclk_q[0+3-:4];
            if (M_usedmap_q[(6'h20 + M_gclk_q[0+3-:4])*1+0-:1] == 1'h1) begin
              M_map_number_d = 6'h20;
            end
            M_usedmap_d[(6'h20 + M_gclk_q[0+3-:4])*1+0-:1] = 1'h1;
          end else begin
            M_map_number_d = M_gclk_q[0+3-:4];
            if (M_usedmap_q[(M_gclk_q[0+3-:4])*1+0-:1] == 1'h1) begin
              M_map_number_d = 1'h0;
            end
            M_usedmap_d[(M_gclk_q[0+3-:4])*1+0-:1] = 1'h1;
          end
          M_timer_settozero = 1'h1;
        end
      end else begin
        if (M_state_q == SHOWMINE_state) begin
          outred = M_map_map_mine;
          if (M_round_q < 2'h3) begin
            outred = M_map_map_mine | M_map_boundary;
          end
          M_aluCompute_mode = 6'h33;
          M_aluCompute_a = M_timer_out;
          M_aluCompute_b = 5'h14;
          if (M_aluCompute_out) begin
            M_state_d = RUNNING_state;
            M_now_position_row_d = start_row;
            M_now_position_col_d = start_col;
            M_leftMines_d = M_map_map_bonus;
            M_path_d = 35'h000000000;
            M_timer_settozero = 1'h1;
          end
        end else begin
          if (M_state_q == RUNNING_state) begin
            M_aluCompute_mode = 6'h01;
            M_aluCompute_a = 8'hc7;
            M_aluCompute_b = M_timer_out;
            outtime = M_aluCompute_out;
            if (M_aluCompute_out == 1'h0) begin
              M_state_d = FAIL_state;
              M_timer_settozero = 1'h1;
              M_counter_failscreen_d = 1'h0;
            end
            if (up) begin
              if (M_now_position_row_q < bound_up && M_path_q[(M_now_position_row_q + 1'h1)*7+(M_now_position_col_q)*1+0-:1] == 1'h0) begin
                M_path_d[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] = 1'h1;
                M_now_position_row_d = M_now_position_row_q + 1'h1;
              end
            end
            if (down) begin
              if (M_now_position_row_q > bound_down && M_path_q[(M_now_position_row_q - 1'h1)*7+(M_now_position_col_q)*1+0-:1] == 1'h0) begin
                M_path_d[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] = 1'h1;
                M_now_position_row_d = M_now_position_row_q - 1'h1;
              end
            end
            if (left) begin
              if (M_now_position_col_q < bound_left && M_path_q[(M_now_position_row_q)*7+(M_now_position_col_q + 1'h1)*1+0-:1] == 1'h0) begin
                M_path_d[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] = 1'h1;
                M_now_position_col_d = M_now_position_col_q + 1'h1;
              end
            end
            if (right) begin
              if (M_now_position_col_q > bound_right && M_path_q[(M_now_position_row_q)*7+(M_now_position_col_q - 1'h1)*1+0-:1] == 1'h0) begin
                M_path_d[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] = 1'h1;
                M_now_position_col_d = M_now_position_col_q - 1'h1;
              end
            end
            if (myreset) begin
              M_now_position_row_d = M_map_start_row;
              M_now_position_col_d = M_map_start_col;
              M_leftMines_d = M_map_map_bonus;
              M_path_d = 35'h000000000;
            end
            if (M_map_map_mine[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] == 1'h1) begin
              M_state_d = FAIL_state;
              M_timer_settozero = 1'h1;
              M_counter_failscreen_d = 1'h0;
            end else begin
              if (M_now_position_row_q == end_row && M_now_position_col_q == end_col) begin
                M_scores_d = M_scores_q + (8'hc7 - M_timer_out);
                if (M_round_q < 5'h05) begin
                  M_state_d = ROUNDSUC_state;
                  M_round_d = M_round_q + 1'h1;
                  M_timer_settozero = 1'h1;
                end else begin
                  M_state_d = FINALSUCCESS_state;
                  M_timer_settozero = 1'h1;
                end
              end
            end
            if (M_leftMines_q[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] == 1'h1) begin
              M_leftMines_d[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] = 1'h0;
              M_scores_d = M_scores_q + (8'hc7 - M_timer_out);
            end
            outred = M_path_q;
            if (M_round_q < 2'h3) begin
              outred = M_path_q | M_map_boundary;
            end
            outred[(end_row)*7+(end_col)*1+0-:1] = 1'h1;
            outgreen = M_leftMines_q;
            M_selectHelper_inp = 1'h1;
            outgreen[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] = M_selectHelper_out;
            outgreen[(end_row)*7+(end_col)*1+0-:1] = 1'h1;
          end else begin
            if (M_state_q == FAIL_state) begin
              M_aluCompute_mode = 6'h35;
              M_aluCompute_a = M_counter_failscreen_q;
              M_aluCompute_b = 3'h7;
              if (M_aluCompute_out) begin
                outgreen[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] = 1'h1;
                outred = M_map_map_mine;
                if (M_round_q < 2'h3) begin
                  outred = M_map_map_mine | M_map_boundary;
                end
                outred[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] = 1'h0;
                M_fasterselectHelper_inp = M_map_map_mine[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1];
                if (M_fasterselectHelper_out) begin
                  outgreen[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] = 1'h0;
                  outred[(M_now_position_row_q)*7+(M_now_position_col_q)*1+0-:1] = 1'h1;
                end
                if (M_timer_out == 4'h8) begin
                  M_timer_settozero = 1'h1;
                  M_counter_failscreen_d = M_counter_failscreen_q + 1'h1;
                end
                for (i = 1'h0; i < M_counter_failscreen_q; i = i + 1) begin
                  for (j = 1'h0; j < 3'h5; j = j + 1) begin
                    outred[(j)*7+(3'h6 - i)*1+0-:1] = 1'h1;
                  end
                end
              end else begin
                outred = 35'h7ffffffff;
              end
              if (confirm) begin
                M_state_d = START_state;
                M_timer_settozero = 1'h1;
              end
            end else begin
              if (M_state_q == ROUNDSUC_state) begin
                outgreen = 35'h010511410;
                if (confirm) begin
                  M_state_d = SHOWROUND_state;
                  M_timer_settozero = 1'h1;
                end
              end else begin
                if (M_state_q == FINALSUCCESS_state) begin
                  outgreen = M_animation_out_win;
                  if (confirm) begin
                    M_state_d = START_state;
                    M_timer_settozero = 1'h1;
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_leftMines_q <= 1'h0;
    end else begin
      M_leftMines_q <= M_leftMines_d;
    end
  end
  
  
  always @(posedge clk) begin
    M_state_q <= M_state_d;
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_round_q <= 1'h0;
    end else begin
      M_round_q <= M_round_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_gclk_q <= 1'h0;
    end else begin
      M_gclk_q <= M_gclk_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_now_position_col_q <= 1'h0;
    end else begin
      M_now_position_col_q <= M_now_position_col_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_now_position_row_q <= 1'h0;
    end else begin
      M_now_position_row_q <= M_now_position_row_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_usedmap_q <= 1'h0;
    end else begin
      M_usedmap_q <= M_usedmap_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_path_q <= 1'h0;
    end else begin
      M_path_q <= M_path_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_map_number_q <= 1'h0;
    end else begin
      M_map_number_q <= M_map_number_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_failscreen_q <= 1'h0;
    end else begin
      M_counter_failscreen_q <= M_counter_failscreen_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_scores_q <= 1'h0;
    end else begin
      M_scores_q <= M_scores_d;
    end
  end
  
endmodule
