/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [6:0] r_red,
    output reg [4:0] c_red,
    output reg [6:0] r_green,
    output reg [4:0] c_green,
    input confirm,
    input myreset,
    input up,
    input down,
    input left,
    input right,
    output reg [7:0] digitout_score,
    output reg [3:0] selectdigit_score,
    output reg [7:0] digitout_time_ge,
    output reg [7:0] digitout_time_shi,
    output reg ge_control,
    output reg shi_control
  );
  
  
  
  reg rst;
  
  wire [35-1:0] M_logic_outred;
  wire [35-1:0] M_logic_outgreen;
  wire [14-1:0] M_logic_outscores;
  wire [8-1:0] M_logic_outtime;
  reg [1-1:0] M_logic_up;
  reg [1-1:0] M_logic_down;
  reg [1-1:0] M_logic_left;
  reg [1-1:0] M_logic_right;
  reg [1-1:0] M_logic_confirm;
  reg [1-1:0] M_logic_myreset;
  logic_1 logic (
    .clk(clk),
    .rst(rst),
    .up(M_logic_up),
    .down(M_logic_down),
    .left(M_logic_left),
    .right(M_logic_right),
    .confirm(M_logic_confirm),
    .myreset(M_logic_myreset),
    .outred(M_logic_outred),
    .outgreen(M_logic_outgreen),
    .outscores(M_logic_outscores),
    .outtime(M_logic_outtime)
  );
  
  wire [7-1:0] M_display_r_red;
  wire [5-1:0] M_display_c_red;
  wire [7-1:0] M_display_r_green;
  wire [5-1:0] M_display_c_green;
  reg [35-1:0] M_display_red;
  reg [35-1:0] M_display_green;
  display_2 display (
    .clk(clk),
    .rst(rst),
    .red(M_display_red),
    .green(M_display_green),
    .r_red(M_display_r_red),
    .c_red(M_display_c_red),
    .r_green(M_display_r_green),
    .c_green(M_display_c_green)
  );
  
  wire [8-1:0] M_displayDigits_digitout_score;
  wire [4-1:0] M_displayDigits_selectdigit_score;
  wire [8-1:0] M_displayDigits_digitout_time_ge;
  wire [8-1:0] M_displayDigits_digitout_time_shi;
  reg [14-1:0] M_displayDigits_scores;
  reg [8-1:0] M_displayDigits_timeinp;
  display_digits_3 displayDigits (
    .clk(clk),
    .rst(rst),
    .scores(M_displayDigits_scores),
    .timeinp(M_displayDigits_timeinp),
    .digitout_score(M_displayDigits_digitout_score),
    .selectdigit_score(M_displayDigits_selectdigit_score),
    .digitout_time_ge(M_displayDigits_digitout_time_ge),
    .digitout_time_shi(M_displayDigits_digitout_time_shi)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_4 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_up_con_out;
  reg [1-1:0] M_up_con_in;
  button_conditioner_5 up_con (
    .clk(clk),
    .in(M_up_con_in),
    .out(M_up_con_out)
  );
  wire [1-1:0] M_down_con_out;
  reg [1-1:0] M_down_con_in;
  button_conditioner_5 down_con (
    .clk(clk),
    .in(M_down_con_in),
    .out(M_down_con_out)
  );
  wire [1-1:0] M_left_con_out;
  reg [1-1:0] M_left_con_in;
  button_conditioner_5 left_con (
    .clk(clk),
    .in(M_left_con_in),
    .out(M_left_con_out)
  );
  wire [1-1:0] M_right_con_out;
  reg [1-1:0] M_right_con_in;
  button_conditioner_5 right_con (
    .clk(clk),
    .in(M_right_con_in),
    .out(M_right_con_out)
  );
  wire [1-1:0] M_confirm_con_out;
  reg [1-1:0] M_confirm_con_in;
  button_conditioner_5 confirm_con (
    .clk(clk),
    .in(M_confirm_con_in),
    .out(M_confirm_con_out)
  );
  wire [1-1:0] M_myreset_con_out;
  reg [1-1:0] M_myreset_con_in;
  button_conditioner_5 myreset_con (
    .clk(clk),
    .in(M_myreset_con_in),
    .out(M_myreset_con_out)
  );
  wire [1-1:0] M_up_edge_out;
  reg [1-1:0] M_up_edge_in;
  edge_detector_11 up_edge (
    .clk(clk),
    .in(M_up_edge_in),
    .out(M_up_edge_out)
  );
  wire [1-1:0] M_down_edge_out;
  reg [1-1:0] M_down_edge_in;
  edge_detector_11 down_edge (
    .clk(clk),
    .in(M_down_edge_in),
    .out(M_down_edge_out)
  );
  wire [1-1:0] M_left_edge_out;
  reg [1-1:0] M_left_edge_in;
  edge_detector_11 left_edge (
    .clk(clk),
    .in(M_left_edge_in),
    .out(M_left_edge_out)
  );
  wire [1-1:0] M_right_edge_out;
  reg [1-1:0] M_right_edge_in;
  edge_detector_11 right_edge (
    .clk(clk),
    .in(M_right_edge_in),
    .out(M_right_edge_out)
  );
  wire [1-1:0] M_confirm_edge_out;
  reg [1-1:0] M_confirm_edge_in;
  edge_detector_11 confirm_edge (
    .clk(clk),
    .in(M_confirm_edge_in),
    .out(M_confirm_edge_out)
  );
  wire [1-1:0] M_myreset_edge_out;
  reg [1-1:0] M_myreset_edge_in;
  edge_detector_11 myreset_edge (
    .clk(clk),
    .in(M_myreset_edge_in),
    .out(M_myreset_edge_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_up_con_in = up;
    M_down_con_in = down;
    M_left_con_in = left;
    M_right_con_in = right;
    M_confirm_con_in = confirm;
    M_myreset_con_in = myreset;
    M_up_edge_in = M_up_con_out;
    M_down_edge_in = M_down_con_out;
    M_left_edge_in = M_left_con_out;
    M_right_edge_in = M_right_con_out;
    M_confirm_edge_in = M_confirm_con_out;
    M_myreset_edge_in = M_myreset_con_out;
    M_logic_up = M_up_edge_out;
    M_logic_down = M_down_edge_out;
    M_logic_left = M_left_edge_out;
    M_logic_right = M_right_edge_out;
    M_logic_confirm = M_confirm_edge_out;
    M_logic_myreset = M_myreset_edge_out;
    M_display_red = M_logic_outred;
    M_display_green = M_logic_outgreen;
    r_red = M_display_r_red;
    r_green = M_display_r_green;
    c_red = M_display_c_red;
    c_green = M_display_c_green;
    M_displayDigits_scores = M_logic_outscores;
    M_displayDigits_timeinp = M_logic_outtime;
    digitout_score = M_displayDigits_digitout_score;
    selectdigit_score = M_displayDigits_selectdigit_score;
    digitout_time_ge = ~M_displayDigits_digitout_time_ge;
    digitout_time_shi = ~M_displayDigits_digitout_time_shi;
    ge_control = 1'h1;
    shi_control = 1'h1;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
  end
endmodule
