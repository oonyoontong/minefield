module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output r_red[7],
    output c_red[5],
    output r_green[7],
    output c_green[5],
    input confirm,
    input myreset,
    input up,
    input down,
    input left,
    input right,
    output digitout_score[8],
    output selectdigit_score[4],
    output digitout_time_ge[8],  
    output digitout_time_shi[8],
    output ge_control,
    output shi_control
  ) {
  
  sig rst;                  // reset signal
  logic logic(.clk(clk),.rst(rst));
  display display(.clk(clk),.rst(rst));
  display_digits displayDigits(.clk(clk),.rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond;
    button_conditioner up_con;
    button_conditioner down_con;
    button_conditioner left_con;
    button_conditioner right_con;
    button_conditioner confirm_con;
    button_conditioner myreset_con;
    edge_detector up_edge( #RISE(1), #FALL(0));
    edge_detector down_edge( #RISE(1), #FALL(0));
    edge_detector left_edge( #RISE(1), #FALL(0));
    edge_detector right_edge( #RISE(1), #FALL(0));
    edge_detector confirm_edge( #RISE(1), #FALL(0));
    edge_detector myreset_edge( #RISE(1), #FALL(0));
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    up_con.in = up;
    down_con.in = down;
    left_con.in = left;
    right_con.in = right;
    confirm_con.in = confirm;
    myreset_con.in = myreset;
    up_edge.in = up_con.out;
    down_edge.in = down_con.out;
    left_edge.in = left_con.out;
    right_edge.in = right_con.out;
    confirm_edge.in = confirm_con.out;
    myreset_edge.in = myreset_con.out;
    logic.up = up_edge.out;
    logic.down = down_edge.out;
    logic.left = left_edge.out;
    logic.right = right_edge.out;
    logic.confirm = confirm_edge.out;
    logic.myreset = myreset_edge.out;
    display.red = logic.outred;
    display.green = logic.outgreen;
    r_red = display.r_red;
    r_green = display.r_green;
    c_red = display.c_red;
    c_green = display.c_green; 
    displayDigits.scores = logic.outscores;
    displayDigits.timeinp = logic.outtime;
    //displayDigits.scores = 1234;
    //displayDigits.timeinp = 190;
    digitout_score = displayDigits.digitout_score;
    selectdigit_score = displayDigits.selectdigit_score;
    digitout_time_ge = ~displayDigits.digitout_time_ge;
    digitout_time_shi = ~displayDigits.digitout_time_shi;
    ge_control = 1;
    shi_control = 1;
    
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
  }
}